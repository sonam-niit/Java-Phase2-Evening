Create Spring Starter Project: add required dependencies

--Spring web
-- Spring Dev Tools
-- MySQL Driver
-- Spring DATA JPA

Create Project
----------------------------------------

Let's create an entity named product in com.simplilearn.backend.entity package.

package com.simplilearn.backend.entity;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Product {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	private String name;
	private float price;
	private float rating;
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public float getPrice() {
		return price;
	}
	public void setPrice(float price) {
		this.price = price;
	}
	public float getRating() {
		return rating;
	}
	public void setRating(float rating) {
		this.rating = rating;
	}
	
}
=====================================================================
Let's create Repository in com.simplilearn.backend.repo package.

package com.simplilearn.backend.repo;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.simplilearn.backend.entity.Product;

@Repository
public interface ProductRepo extends JpaRepository<Product, Integer>{

}

============================================================================

Let's create a service Interface in com.simplilearn.backend.service package.

package com.simplilearn.backend.service;

import java.util.List;

import com.simplilearn.backend.entity.Product;

public interface ProductService {

	public List<Product> getAllProducts();
	public Product getProductById(int id);
	public Product saveProduct(Product p);
	public Product updateProduct(Product p, int id);
	public boolean deleteProduct(int id);
}

===========================================================================

Let's Implement this service interface for all method defination

package com.simplilearn.backend.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.simplilearn.backend.entity.Product;
import com.simplilearn.backend.repo.ProductRepo;

@Service
public class ProductServiceImpl implements ProductService {
	
	@Autowired
	private ProductRepo repo;

	@Override
	public List<Product> getAllProducts() {
		return repo.findAll();
	}
	@Override
	public Product getProductById(int id) {
		return repo.findById(id).get();
	}
	@Override
	public Product saveProduct(Product p) {
		return repo.save(p);
	}
	@Override
	public Product updateProduct(Product p, int id) {
		if(repo.findById(id).isPresent()) {
			
			Product old= repo.findById(id).get();
			old.setName(p.getName());
			old.setPrice(p.getPrice());
			old.setRating(p.getRating());
			return repo.save(old); //update the object
		}
		return null;
	}

	@Override
	public boolean deleteProduct(int id) {
		if(repo.findById(id).isPresent()) {
			repo.deleteById(id);
			return true;
		}
		return false;
	}

}


=======================================================================================
Create a Rest Controller for Product in com.simplilearn.backend.controller package

package com.simplilearn.backend.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.simplilearn.backend.entity.Product;
import com.simplilearn.backend.service.ProductService;

@RestController
@RequestMapping("/api/product")
public class ProductController {

	@Autowired
	private ProductService service;
	@PostMapping("")
	public ResponseEntity<Object> saveProduct(@RequestBody Product product){
		
		Product savedProduct=service.saveProduct(product);
		if(savedProduct!=null)
			return new ResponseEntity<Object>(savedProduct,HttpStatus.CREATED);
		else
			return new ResponseEntity<Object>("Error While creating an Object",
					HttpStatus.INTERNAL_SERVER_ERROR);
	}
	@GetMapping("")
	public List<Product> getAllProducts(){
		return service.getAllProducts();
	}
	@GetMapping("{id}")
	public ResponseEntity<Object> getProductById(@PathVariable int id){
		Product found=service.getProductById(id);
		if(found!=null)
			return new ResponseEntity<Object>(found,HttpStatus.OK);
		return new ResponseEntity<Object>("Product Not Found",HttpStatus.NOT_FOUND);
	}
	@DeleteMapping("{id}")
	public ResponseEntity<Object> deleteProductById(@PathVariable int id){
		if(service.deleteProduct(id))
			return new ResponseEntity<Object>("Product Deleted",HttpStatus.OK);
		return new ResponseEntity<Object>("Product Not Found to Delete",
				HttpStatus.NOT_FOUND);
	}
	@PutMapping("{id}")
	public ResponseEntity<Object> updateProductById(@PathVariable int id,
			@RequestBody Product product){
		Product updated=service.updateProduct(product, id);
		if(updated!=null)
			return new ResponseEntity<Object>(updated,HttpStatus.OK);
		return new ResponseEntity<Object>("Product Not Found to update",
				HttpStatus.NOT_FOUND);
	}
}

==============================================================================================

Add Database Properies in application.properties file in Resources folder

spring.datasource.username=root
spring.datasource.password=Sonam@123
spring.datasource.url=jdbc:mysql://localhost:3306/medicarebackend
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
server.port=8081

================================================================================================
Run your project as Springboot Application and test APIs using Postman.

1. Select Method Post: http://localhost:8081/api/product

click on body --> raw --> JSON Data and enter below mentioned Object

{
    "name": "pen",
    "price": 10.05,
    "rating": 4.6
}

send --> you can see the response Object with Id also check the Response Status (201- created)

2. select method get: http://localhost:8081/api/product  --> send you can see array of objects

3. select method get: http://localhost:8081/api/product/1  --> send you can see a perticular Object

4. select method get: http://localhost:8081/api/product/3 --> see HttpStatus Not found

5. select method put: http://localhost:8081/api/product/1 --> add object in body to update

{
    "name": "pen",
    "price": 10.05,
    "rating": 4.8
}

click on send

you can see the status ok and rating will get updated.

6. try to update the ID which is actually not available:

	http://localhost:8081/api/product/5  you can see not found status.

7. select delete method and pass Id from URL.

	http://localhost:8081/api/product/1

	if product deleted then you can see OK status in PostMan.

8. again delete: http://localhost:8081/api/product/1

		you can see not found status.











































































